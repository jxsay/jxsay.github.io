<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客]]></title>
    <url>%2Farticles%2F2018%2F32e4259a.html</url>
    <content type="text"><![CDATA[源码和pages的管理HEXO的安装和使用比较简单，这里不再重复提起了。主要说一下博客源码和pages的管理。 hexo init folder 初始化一个目录为网站源文件目录，然后可以再将该目录init成一个git的repo。每次写完文章之后，可以将所有的源文件改动提交到另一个git的repo当中。这样就可以很方便的在不同的电脑上或者不同的环境中写文章了。 这里看到有些人会在github pages的repo中再开一个branch来管理源文件。这也是一种可行的方法，有一个弊端就是你所有的配置和私人的app id都暴露给大家了，不安全。我的做法是将源文件提交到private repo，而不是public repo。推荐一下微软的visualstudio，个人账号就可以免费用私人repo，很方便。 多个git账号的管理因为同时使用了github和visualstudio，在使用ssh操作git的时候，就需要管理多个git账号了。这里记录一下管理方法： ssh-keygen -t rsa -C “xx@yyy.com“ 每个git account都要生成一个ssh key。文件名要区别开，我这里使用的是 id_rsa_github 和 id_rsa_visualstudio 来区别两个key。然后在.ssh文件夹下面新建一个config文件，可以参考如下进行配置：123456789Host vs-ssh.visualstudio.com Hostname vs-ssh.visualstudio.com User &lt;UserName&gt; IdentityFile ~/.ssh/id_rsa_visualstudioHost github.com Hostname github.com User &lt;UserName&gt; IdentityFile ~/.ssh/id_rsa_github Host 后面跟的是alias，我图方便，就跟hostname设置成一样的了。这样就不用改动源url。如果你的alias跟hostname不一样，在clone和deploy的时候，一样要将url中hostname的字符串改成你设置的alias。比如说我将github 账户改成如下设置1234Host mockgit Hostname github.com User &lt;UserName&gt; IdentityFile ~/.ssh/id_rsa_github 那么所有的github的url，需要做出如下的变动： git@github.com:jxsay/jxsay.github.io.git 改成 git@mockgit:jxsay/jxsay.github.io.git 多个key的config设置完成以后，还需要将key添加到ssh-agent当中： ssh-agent bash ssh-add ~/.ssh/id_rsa_github ssh-add ~/.ssh/id_rsa_visualstudio 然后就可以正常git操作了。 提交源文件到私人repo在将hexo的源文件提交到visualstudio的时候，如果你使用了非默认的theme，比如Next主题，就会发现themes/next也是一个git repo，这样就不能直接git add themes/next/的文件。一个简单的做法就是把themes/next/目录下面的.git文件夹删掉就可以了，后续升级版本的时候再clone一份新的就好。 如果你在删掉.git文件夹之前，已经git add themes/next/的文件了。即使你后面再删掉.git文件夹，在执行git add的时候也一定会报错。这时候删除一下cache就好： git rm –cached themes/next/ Hexo配置主要记录一些常用的配置。 评论系统这里使用了Valine评论系统，参考官方文档配置一下就好。有一个不满意的地方就是可以昵称，邮箱和网址都不填写的情况下，进行留言操作。至少应该有一个吧，后续有时间看看能不能改一下。 搜索功能这里使用的是LocalSearch 在站点根目录，安装一下 hexo-generator-searchdb 插件 npm install hexo-generator-searchdb –save 然后在站点配置文件_config.yml的最后添加如下配置：12345search: path: search.xml field: post format: html limit: 2000 再在Next的主题配置文件_config.yml中，找到local_search的配置位置，enable设为true就好了。 文章的链接默认情况下，站点的配置文件_config.yml中有如下配置： permalink: :year/:month/:day/:title. 这个配置非常的不方便进行文章管理，可以简单的只用 /:title，但这样又会强依赖于文章的名字，假如写好的文章以后想更新一下文章名，反而就会导致以前的链接不可用。或者标题很长且是中文，url也会变得很繁琐。 有两个方法来解决这个事情，一个是再加一个属性，比如urlname。这时候可以将设置改成如下格式： permalink: posts/:year/:urlname.html 第二个方法是安装一个hexo-abbrlink插件 npm install hexo-abbrlink –save 配置文件改成：1234permalink: post/:year/:abbrlink.htmlabbrlink: alg: crc32 rep: hex 第一种方法需要手动设置，但是不依赖第三方插件，第二种方法更加系统一些。都是好的解决方案。 压缩文章源文件在站点的根目录下面执行以下命令：12npm install gulp -gnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 然后在根目录下面添加 gulpfile.js 文件并填入如下内容：12345678910111213141516171819202122232425262728293031323334353637383940414243var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);// 压缩css文件gulp.task(&apos;minify-css&apos;, function () &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss(&#123; advanced: true,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）] compatibility: &apos;ie7&apos;,//保留ie7及以下兼容写法 类型：String 默认：&apos;&apos;or&apos;*&apos; [启用兼容模式； &apos;ie7&apos;：IE7兼容模式，&apos;ie8&apos;：IE8兼容模式，&apos;*&apos;：IE9+兼容模式] keepBreaks: true,//类型：Boolean 默认：false [是否保留换行] keepSpecialComments: &apos;*&apos; //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀 &#125;)) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩html文件gulp.task(&apos;minify-html&apos;, function () &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true,//清除 HTML 注释 collapseWhitespace: true,//压缩 HTML collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt; removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true,//删除 &lt;script&gt; 的 type=&quot;text/javascript&quot; removeStyleLinkTypeAttributes: true,//删除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot; minifyJS: true,//压缩页面 JS minifyCSS: true//压缩页面 CSS &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩js文件gulp.task(&apos;minify-js&apos;, function () &#123; return gulp.src(&apos;./public/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 默认任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;]); 然后每次生成文章那个的时候，执行如下命令就可以了。 hexo g &amp;&amp; gulp 首页的文章显示为卡片样式其实就是添加了阴影。打开 \themes\next\source\css\_custom\custom.styl 然后加入如下内容：12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 结束语经过这些设置，一个简单的博客就算搭建起来了。搭建博客不是目的，目的是记录自己的学习和进步，分享自己的心得。一起进步吧。]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Farticles%2F2018%2F16107.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello</category>
      </categories>
  </entry>
</search>
